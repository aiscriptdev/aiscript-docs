ai:
  - title: Prompt
    description: The `prompt` keyword allows direct interaction with AI models. It supports both simple string inputs and advanced configurations with model parameters like temperature and token limits, making AI interactions a first-class language feature.
    codeDemos:
      - code: |
          // Simple prompt usage
          let answer = prompt "What is the capital of France?";
          print(answer); // Paris

          // Advanced syntax with model configuration
          let detailed_answer = prompt {
              input: "Explain quantum computing",
              model: "gpt-4",
              max_tokens: 500,
              temperature: 0.7,
              system_prompt: "You are a quantum physics expert"
          };
          print(detailed_answer);
        filename: prompt.ai
      - code: |
            OPENAI_API_KEY=put-your-openapi-key-here
        filename: .env
  - title: AI Function
    description: The `ai fn` keyword defines functions powered by AI models with full type safety and error handling. These functions seamlessly integrate AI capabilities into your application logic while maintaining the reliability of traditional functions.
    codeDemos:
      - code: |
          // Define an AI function for sentiment analysis
          ai fn analyze_sentiment(text: str) -> float {
              let sentiment = prompt f"Analyze the sentiment of this text and return a score between -1 and 1: {text}";
              return float(sentiment);
          }

          // Use the AI function
          let review = "This product is amazing! Best purchase ever!";
          let score = analyze_sentiment(review);
          print(score); // 0.9
        filename: ai_function.ai
      - code: |
          OPENAI_API_KEY=put-your-openapi-key-here
        filename: .env
  - title: Agent
    description: |
      The `agent` keyword creates autonomous AI agents with specific instructions and tool functions. Inspired by [OpenAI Swarm](https://github.com/openai/swarm), AIScript's multi-agent orchestration allows complex AI systems to be defined directly in the language, enabling sophisticated AI workflows with minimal code.
    codeDemos:
      - code: |
          let player1_move = nil;
          let player2_move = nil;
          agent Judge {
            instructions: "You are the judge of the Rock Paper Scissors game.
            1. Let Player1 move first then Player2
            2. Use record_move to store each player's move after it finished
            3. After both players finished, use announce_result to display the result
            4. End the game after announcing results",
            fn record_move(player: str, move: str) {
              """Record a player's move."""
                  print(player, "choose", move);
                  if player == "Player1" {
                      player1_move = move;
                  } else {
                      player2_move = move;
                  }
              }
              fn announce_result() {
                  """Check the recorded moves and announce the winner."""
                  let winning_moves = {"rock": "scissors", "scissors": "paper", "paper": "rock"};
                  if player1_move == player2_move {
                      print("It's a tie!");
                  } else if winning_moves[player1_move] == player2_move {
                      print("Player 1 wins!");
                  } else {
                      print("Player 2 wins!");
                  }
              }
              fn transfer_to_player1() {
                  """Transfer control to Player 1 Agent"""
                  return Player1;
              }
              fn transfer_to_player2() {
                  """Transfer control to Player 2 Agent"""
                  return Player2;
              }
          }
        filename: judger.ai
      - code: |
          use std.random;
          
          fn make_move() -> str {
              """Make a move in the game. Returns rock, paper, or scissors."""
              return random.choice(["rock", "paper", "scissors"]);
          }
          fn transfer_to_judge() {
              """Transfer control to Judge Agent"""
              return Judge;
          }
          agent Player1 {
              instructions: "You are Player 1 in the Rock Paper Scissors game.
              1. Make your move using the make_move function
              2. Transfer control to the judge after your move",
              tools: [make_move, transfer_to_judge],
          }
          agent Player2 {
              instructions: "You are Player 2 in the Rock Paper Scissors game.
              1. Make your move using the make_move function
              2. Transfer control to the judge after your move",
              tools: [make_move, transfer_to_judge],
          }
        filename: player.ai
      - code: |
          Judge.run(input="Let's start play the game!", debug=true);
          // Here are the logs:
          //
          // Judge call transfer_to_player1()
          // Player1 call make_move(): scissors
          // Player1 call transfer_to_judge()
          // Judge call record_move(Player1, scissors)
          // Judge call transfer_to_player2()
          // Player2 call make_move(): paper
          // Player2 call transfer_to_judge()
          // Judge call record_move(Player2, paper)
          // Judge call announce_result(): Player 1 wins!
        filename: main.ai
      - code: |
          OPENAI_API_KEY=put-your-openapi-key-here
        filename: .env

web:
  - title: Route DSL
    description: Define web routes with a simple, intuitive DSL that combines the clarity of RESTful design with AIScript's type system. Routes support AI-powered endpoints, path parameters, and comprehensive request validation without additional middleware.
    codeDemos:
      - code: |
          get /repo {
              """Repo API"""

              query {
                  """repo name"""
                  @string(min_len=3, max_len=30)
                  name: str
              }

              return f"repo: {query.name}";
          }
        filename: get.ai
      - code: |
          post /repo {
              """Create a repository"""

              // Replace @json with @form to parse body from form
              @json
              body {
                  """The repository name"""
                  @string(min_len=3, max_len=30)
                  name: str
              }

              return f"create repo: {body.name}";
          }
        filename: post.ai
      - code: |
          put /repo/:id {
              """Update a repository"""
              path {
                  """The repository id"""
                  id: int
              }

              @json
              body {
                  """The repository name"""
                  @string(min_len=3, max_len=30)
                  name: str
              }

              return f"update repo: {body.name}";
          }
        filename: put.ai
      - code: |
          delete /repo/:id {
              """Delete a repository"""

              path {
                id: str
              }

              return f"delete repo: {id}";
          }
        filename: delete.ai
  - title: Validator
    description: Built-in request validation with automatic type checking and customizable validation rules. Validators integrate directly with route definitions to ensure API endpoints are secure and robust with minimal boilerplate.
    codeDemos:
      - code: |
          post /api/user {
              // Request body validation
              @json
              body {
                  @string(min_length: 3, max_length: 20)
                  username: str,
                  @format(type="email")
                  email: str,
                  @number(min=18)
                  age: int,
              }

              // Body is already validated
              // Insert user into users table...
              return "User created successfully";
          }
        filename: validator.ai
      - code: |
          $ curl -X POST -X POST http://localhost:8080/api/user \
              -H 'Content-Type: application/json' \
              -d '{
                  "username": "john_doe",
                  "email": "johndoe@gmail.com",
                  "age": 17
              }'

          {
            "error": "ValidationError",
            "message": "Invalid request body",
            "details": [
              {
                "field": "age",
                "message": "Value must be greater than or equal to 18"
              }
            ]
          } 
          $ curl -X POST -X POST http://localhost:8080/api/user \
              -H 'Content-Type: application/json' \
              -d '{
                  "username": "john_doe",
                  "email": "johndoe@gmail.com",
                  "age": 25
              }'
           User created successfully 
        filename: curl
  - title: OpenAPI
    description: Automatic OpenAPI documentation generation from route definitions with zero configuration. Documentation includes complete type information, validation rules, and examples derived directly from your code.
    codeDemos:
      - code: |
          get / {
              """An api to ask LLM"""

              query {
                  """the question to ask"""
                  @string(min_len=3, max_len=100) // validate params with builtin directive @string
                  question: str
              }

              // `ai` and `prompt` are keywords
              ai fn ask(question: str) -> str {
                  let answer = prompt question;
                  return answer;
              }
              // use query.name or query["name"] to access query parameter
              let answer = ask(query.question);
              return { answer };
          }
        filename: openapi.ai
      - img: https://aiscript.dev/guide/open-api.png
        filename: openapi.png
  - title: Effortless Auth and Social Login
    description: Integrate authentication and social login providers with minimal configuration. AIScript's auth decorators handle complex security flows while maintaining type safety throughout the authentication process.
    codeDemos:
      - code: |
          post /signin {
              body {
                  username: str,
                  password: str,
              }

              // Verify username and password correctly
              use std.auth.jwt;
              // Create payload with claims
              let payload = {
                  sub: body.username,
              };

              // Create access token that expires in 1 hour (3600 seconds)
              let token = jwt.create_access_token(payload, 3600, "your-secret");
              return { token };
          }

          // JWT auth
          @auth
          get /ask {
              query {
                  @string(min_len=5, max_len=50)
                  question: str
              }

              ai fn ask_llm(question: str) -> str {
                  return prompt question;
              }
              let answer = ask_llm(query.question);
              return { answer };
          }
        filename: jwt_auth.ai
      - code: |
          $ curl --location 'http://localhost:8080/signin' \
          --header 'Content-Type: application/json' \
          --data '{"username": "abc", "password": "123455"}'

          {
              "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhYmMiLCJleHAiOjE3NDEzMjA0NzUsIm5iZiI6MTc0MTMxNjg3NSwiaWF0IjoxNzQxMzE2ODc1fQ.542CSBvnWbmQZAO8Ba-IjxxsZ4U-JSTmSalJFN574SY"
          }

          $ curl --location --request GET 'http://localhost:8080/ask?question=What%20is%20the%20capital%20of%20China%3F' \
          --header 'Content-Type: application/json' \
          --header 'Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhYmMiLCJleHAiOjE3NDEzMjA0NzUsIm5iZiI6MTc0MTMxNjg3NSwiaWF0IjoxNzQxMzE2ODc1fQ.542CSBvnWbmQZAO8Ba-IjxxsZ4U-JSTmSalJFN574SY'

          {
              "answer": "The capital of France is Paris."
          }
        filename: curl
      - code: |
          // Username/Password auth
          @basic_auth
          post /guess {
              body {
                  @number(min=1, max=100)
                  magic: int = 1
              }
              
              let result = "Try again!";
              if body.magic == 42 {
                  result = "You guessed it!";
              }
              return { result };
          }
        filename: basic_auth.ai
      - code: |
          @sso(provider="google")
          get /auth/google {
              let url = sso.authority_url();
              print(url);
              return temporary_redirect(target=url);
          }

          @sso(provider="google")
          get /auth/google/callback {
              query {
                  code: str,
                  state: str,
              }

              print("code", query.code);
              print("state", query.state);
              let user_info = sso.verify(code=query.code);
              print(user_info);
              return { user_info };
          }
        filename: google_login.ai
      - code: |
          [auth.jwt]
          secret = "your-secret"
          expiration = 3600

          [auth.basic]
          username = "admin"
          password = "123456"

          [sso.google]
          client_id = "123"
          client_secret = "abc"
          redirect_url = "http://localhost:8080/auth/google/callback"
          scopes = ["email"]
        filename: project.toml

language:
  - title: Enum
    description: Enums in AIScript provide a type-safe way to define a set of named constants. With full pattern matching support and the ability to associate values with variants, enums help create more expressive and error-resistant code.
    codeDemos:
      - code: |
          enum Status {
            Pending   = 1,
            Active    = 2, 
            Suspended = 3,
          }
          fn process_status(status: Status) {
              match status {
                  Status::Pending => print("Pending"),
                  Status::Active => print("Active"),
                  Status::Suspended => print("Suspended"),
              }
          }
          print(process_status(Status::Active)); // expect: Status::Active(1)
        filename: enum.ai
      - code: |
          enum Status {
            Pending   = 1,
            Active    = 2, 
            Suspended = 3,
          }
          // use [Enum::Variant] syntax to evaluate
          // the value of variant
          print([Status::Active]); // expect: 1
        filename: evaluate_enum.ai
  - title: Lambda
    description: Lambda expressions provide concise, flexible function definitions with automatic variable capture from the surrounding scope. AIScript's lambdas support both single-expression and block forms with implicit returns for maximum readability.
    codeDemos:
      - code: |
          // Lambda capturing variables from outer scope
          let multiplier = 2;
          let times = |x| x * multiplier;
          print(times(4)); // expect: 8
          multiplier = 3;
          print(times(4)); // expect: 12

          // Passing lambda as argument
          fn apply(f, x) {
              return f(x);
          }
          print(apply(|x| x * x, 3)); // expect: 9
        filename: lambda.ai
      - code: |
          let p = |x| {
              print(x);
              99
          };
          print(p(100));
          // expect: 100
          // expect: 99

          let p = |x| {
              print(x);
              return 99;
          };
          print(p(100));
          // expect: 100
          // expect: 99
        filename: implicit_return.ai
  - title: Pipe Operator
    description: The pipe operator (|>) enables clean, readable function chaining for data transformation pipelines. By passing the result of one expression as the first argument to the next function, complex operations become more intuitive and maintainable.
    codeDemos:
      - code: |
          let add_one = |x| x + 1;
          let multiply_two = |x| x * 2;
          let add_n = |x, n| x + n;

          let v = 1;
          print(v |> add_one); // expect: 2
          print(v |> add_one + 1); // expect: 3

          print(v |> multiply_two); // expect: 2
          print(v |> multiply_two + 1); // expect: 3
          print(v |> multiply_two |> multiply_two + 1); // expect: 5

          print(v |> add_one |> multiply_two + 1); // expect: 5
          print(v |> multiply_two |> add_one * 2); // expect: 6

          print(v |> add_n(10)); // expect: 11
          print(v |> add_n(10) + 1); // expect: 12
          print(1 + v |> add_n(10)); // expect: 12
          print(1 + (v |> add_n(10))); // expect: 12
        filename: pipe.ai
      - code: |
          // Basic pipe operator
          let arr = [1, 2, 3, 4];
          let doubled = arr |> map(|x| x * 2);
          print(doubled); // expect: [2, 4, 6, 8]

          let double = |x| x * 2;
          let doubled = arr |> map(double);
          print(doubled); // expect: [2, 4, 6, 8]

          // Chained pipe operators
          let result = arr |> map(|x| x + 1) |> filter(|x| x % 2 == 0);
          print(result); // expect: [2, 4]

          // Pipe with multiple arguments
          let arr2 = [1, 2, 3];
          let arr3 = arr2 |> map(|x| x + 1);
          print(arr3); // expect: [2, 3, 4]

          // Complex lambda expressions in pipe
          let result = arr |> filter(|x| x > 2) |> map(|x| x * x);
          print(result); // expect: [9, 16]

          // Pipe with nested expressions
          let result = [1, 2, 3, 4, 5, 6] 
              |> filter(|x| x % 2 == 0) 
              |> map(|x| x * 2) 
              |> filter(|x| x > 5);
          print(result); // expect: [8, 12]
        filename: compose.ai
  - title: Error handling
    description: AIScript provides robust error handling with typed errors and elegant propagation mechanics. The raise keyword and the ? operator for error propagation enable type-safe error handling with minimal boilerplate, while error handlers provide flexible recovery options.
    codeDemos:
      - code: |
          // Every enum or class ends with ! is an error type
          enum ArithError! {
              DivideZero = "Can not divide zero"
          }
          // Multiple error types are supported, like this:
          // fn divide(a, b) -> int, ArithError! | AnotherError! {}
          fn divide(a, b) -> int | ArithError! {
              if b == 0 {
                  raise ArithError!::DivideZero;
              }

              return a / b;
          }
          // Catch error and early return
          fn do_math1(n) {
              // use syntax `|err| {}` after function call to handle error
              let v = divide(1, n) |err| {
                  print("[error]", err);
                  return;
              };
              print("[value]", v);
          }
          do_math1(1); // expect: [value] 1
          do_math1(0); // expect: [error] ArithError!::DivideZero(Can not divide zero)
        filename: error.ai
      - code: |
          enum ArithError! {
              DivideZero,
          }

          fn divide(a, b) -> int | ArithError! {
              if b == 0 {
                  raise ArithError!::DivideZero;
              }
              return a / b;
          }

          fn do_math1(n) -> ArithError! {
              // use ? to propagate error
              let v = divide(1, n)?;
              print("[value]", v);
          }

          do_math1(1); // expect: [value] 1
          print(do_math1(0)); // expect: ArithError!::DivideZero

          fn do_math2(n) -> ArithError! {
              // use raise to re-raise error, this equal to ? operator
              let v = divide(1, n) |err| {
                  raise err;
              };
              print("[value]", v);
          }

          do_math2(1); // expect: [value] 1
          print(do_math2(0)); // expect: ArithError!::DivideZero
        filename: error_propogation.ai
      - code: |
          enum ArithError! {
              DivideZero,
          }

          fn divide(a, b) -> int | ArithError! {
              if b == 0 {
                  raise ArithError!::DivideZero;
              }

              return a / b;
          }

          let v = divide(1, 0) |err| {
              let a = 1;
              print("error:", err); // expect: error: ArithError!::DivideZero
              999 // The last expression is the default return value if error handled
          };
          print(v); // expect: 999
        filename: default_value.ai
  - title: Class Literal and Validation
    description: AIScript classes combine type definitions with validation rules. Field validators ensure data integrity at runtime, while object literals provide a concise syntax for instantiation with smart defaults and property shorthand notation.
    codeDemos:
      - code: |
          class Person {
            name: str,
            age: int = 18,
          }

          let p = Person { name: "Alice" };
          print(p.name, p.age); // expect: Alice 18

          let p = Person { name: "Alice", age: 20 };
          print(p.name, p.age); // expect: Alice 20

          let name = "Alice";
          let age = 30;
          let p = Person { name, age };
          print(p.name, p.age); // expect: Alice 30
        filename: class_literal.ai
        lang: javascript
      - code: |
          class User {
              @string(min_len=3, max=20)
              name: str,
              @number(min=18, strict_int=true, strict_float=true)
              age: int,
              @in(["male", "female"])
              gender: str = "male",
          }
          let u1 = User("Le", 20, "male") |err| {
              print("Validate error:", err);
          };
          // Validate error: { 
          //      loc: [name], input: Le, type: validation_error,
          //      msg: String length is less than the minimum length of 3 
          // }
          let u2 = User("Lee", 17, "male") |err| {
              print("Validate error:", err);
          };
          // Validate error: {
          //      loc: [age], input: 17, type: validation_error,
          //      msg: Number is less than the minimum value of 18
          // }
          let u3 = User("Lee", 20, "boy") |err| {
              print("Validate error:", err);
          };
          // Validate error: {
          //      loc: [gender], input: boy, type: validation_error,
          //      msg: Value is not in the list of allowed values
          // }
          let u4 = User("Lee") |err| {
              print("Validate error:", err);
          };
          // Validate error: {
          //      loc: [age], input: nil, type: missing,
          //      msg: Field required
          // }
        filename: class_field_validation.ai
        lang: javascript


std-library:
  - title: Database
    description: Native database operations with type-safe queries and comprehensive drivers for PostgreSQL, SQLite, and Redis. The database modules support transactions, prepared statements, and result mapping to typed objects for type-safe data access.
    codeDemos:
      - code: |
          // Import postgres module from std library
          use std.db.pg;

          pg.query("INSERT INTO language (name) VALUES($1) RETURNING id, name;", "Rust");
          let languages = pg.query("select id, name from language;");
          print(languages); // expect: [1, "Rust"]
          let languages = pg.query_as(Language, "select id, name from language where id > 3 limit 10;");
          class Language {
              id: int,
              name: str,
          }
          print(languages);
        filename: query.ai
      - code: |
          // Import postgres module from std library
          use std.db.pg;

          let tx = pg.begin_transaction();

          let r1 = tx.query("INSERT INTO language (name) VALUES($1) RETURNING id, name;", "JavaScript");
          print(r1);
          let r2 = tx.query("INSERT INTO language (name) VALUES($1) RETURNING id, name;", "AIScript");
          print(r2);
          tx.commit();

          let languages = pg.query_as(Language, "select id, name from language where id > 10 limit 10;");
          print(languages);
        filename: transaction.ai
      - code: |
          use std.db.redis;

          // Simple commands
          redis.cmd("SET mykey somevalue");
          let value = redis.cmd("GET mykey");
          print(value);
          let lists = redis.cmd("LRANGE mylist 0 -1");
          print(lists);

          // Pipeline usage
          let p = redis.pipeline();
          p.cmd("SET k1 v1");
          p.cmd("SET k2 v2");
          p.cmd("GET k1");
          let results = p.exec();  // Execute pipeline
          print(results);  // ["OK", "OK", "v1"]
        filename: redis.ai
      - code: |
          [database.postgresql]
          url = "your-database-url"

          [database.redis]
          url = "your-redis-url"
        filename: project.toml
  - title: Std Library
    description: AIScript's standard library provides a comprehensive set of modules for common tasks including serialization, HTTP requests, file handling, cryptography, and more. Each module follows consistent patterns for predictable and reliable behavior.
    codeDemos:
      - code: |
          use std.serde;

          let s = "{\"name\": \"Alice\", \"age\": 30}";
          let obj = serde.from_str(s);
          // Basic usage without pretty-printing
          let str1 = serde.to_str(obj);
          print(str1);
          // With pretty-printing
          let str2 = serde.to_str(obj, pretty=true);
          print(str2);

          // File operations with pretty-printing
          serde.to_file("output.json", obj, pretty=true);
        filename: serde.ai
      - code: |
          use std.http;

          // Simple GET request
          let response = http.get("https://ipinfo.io/");

          // GET with headers
          let headers = {
              "Authorization": "Bearer token123",
              "Accept": "application/json"
          };
          let response = http.get("https://api.example.com/users", headers);

          // // POST with JSON body
          let json_body = {
              name: "John Doe",
              email: "john@example.com"
          };
          let response = http.post("https://api.example.com/users", headers, json_body);
        filename: http.ai
  - title: Builtin functions
    description: A rich set of built-in functions for string manipulation, array operations, mathematical calculations, and date handling. These functions integrate seamlessly with the language's type system to provide powerful operations with minimal code.
    codeDemos:
      - code: |
          // String manipulation
          let text = "hello world";
          print(text.capitalize()); // Hello world
          print(text.split(" ")); // ["hello", "world"]

          // Array operations
          // Initialize a test array
          let numbers = [10, 5, 8, 3, 1];
          print(numbers);  // expect: [10, 5, 8, 3, 1]

          // append - Add an item to the end
          numbers.append(20);
          print(numbers);  // expect: [10, 5, 8, 3, 1, 20]

          // extend - Extend with another array
          numbers.extend([30, 40]);
          print(numbers);  // expect: [10, 5, 8, 3, 1, 20, 30, 40]

          // insert - Insert an item at position
          numbers.insert(2, 15);
          print(numbers);  // expect: [10, 5, 15, 8, 3, 1, 20, 30, 40]

          // sort - Sort the array
          let sorted = numbers.sort();
          print(sorted);  // expect: [1, 3, 3, 5, 8, 10, 15, 20, 30, 40]
        filename: builtin.ai
